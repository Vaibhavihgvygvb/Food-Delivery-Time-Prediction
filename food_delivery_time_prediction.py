# -*- coding: utf-8 -*-
"""Food Delivery Time Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c6i3uBTI5HQmNdsWfWI_qgkzxFVo929v
"""

import pandas as pd
import numpy as np
import plotly.express as px

data = pd.read_csv("deliverytime.txt")
print(data.head())

data.info()

data.isnull().sum()

# Set the earth's radius (in kilometers)
R = 6371

# Convert degrees to radians
def deg_to_rad(degrees):
    return degrees * (np.pi/180)

# Function to calculate the distance between two points using the haversine formula
def distcalculate(lat1, lon1, lat2, lon2):
    d_lat = deg_to_rad(lat2-lat1)
    d_lon = deg_to_rad(lon2-lon1)
    a = np.sin(d_lat/2)**2 + np.cos(deg_to_rad(lat1)) * np.cos(deg_to_rad(lat2)) * np.sin(d_lon/2)**2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))
    return R * c


# Calculate the distance between each pair of points
data['distance'] = np.nan

for i in range(len(data)):
      data.loc[i, 'distance'] = distcalculate(data.loc[i, 'Restaurant_latitude'],
                                              data.loc[i, 'Restaurant_longitude'],
                                              data.loc[i, 'Delivery_location_latitude'],
                                              data.loc[i, 'Delivery_location_longitude'])

print(data.head())

import plotly.express as px

# Drop rows where "Time_taken(min)" has NaN values
data_cleaned = data.dropna(subset=["Time_taken(min)"])

# Create scatter plot
figure = px.scatter(
    data_frame=data_cleaned,
    x="distance",
    y="Time_taken(min)",
    size="Time_taken(min)",  # Ensure no NaN values
    trendline="ols",
    title="Relationship Between Distance and Time Taken"
    )
figure.show()

import plotly.express as px

# Drop rows with NaN values
data_cleaned = data.dropna(subset=["Time_taken(min)"])

# Create scatter plot
figure = px.scatter(
    data_frame=data_cleaned,
    x="Delivery_person_Age",
    y="Time_taken(min)",
    size="Time_taken(min)",  # Ensure no NaN values
    color="distance",
    trendline="ols",
    title="Relationship Between Time Taken and Age"
    )

figure.show()

import plotly.express as px

# Drop rows where "Time_taken(min)" has NaN values
data_cleaned = data.dropna(subset=["Time_taken(min)"])

# Create scatter plot
figure = px.scatter(
    data_frame=data_cleaned,
    x="Delivery_person_Ratings",
    y="Time_taken(min)",
    size="Time_taken(min)",  # Ensure no NaN values
    color="distance",
    trendline="ols",
    title="Relationship Between Time Taken and Ratings"
)

figure.show()

fig = px.box(data,
             x="Type_of_vehicle",
             y="Time_taken(min)",
             color="Type_of_order")
fig.show()

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from sklearn.model_selection import train_test_split

# Reshape data correctly
x = np.array(data[["Delivery_person_Age", "Delivery_person_Ratings", "distance"]])
y = np.array(data[["Time_taken(min)"]])

# Split the dataset
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.10, random_state=42)

# Reshape xtrain and xtest for LSTM (samples, time_steps=1, features)
xtrain = xtrain.reshape((xtrain.shape[0], 1, xtrain.shape[1]))
xtest = xtest.reshape((xtest.shape[0], 1, xtest.shape[1]))

# Create LSTM model
model = Sequential([
LSTM(128, return_sequences=True, input_shape=(1, 3)),  # time_steps=1, features=3
                     LSTM(64, return_sequences=False),
                     Dense(25),
                     Dense(1)])

# Model summary
model.summary()

# training the model
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(xtrain, ytrain, batch_size=1, epochs=9)

print("Food Delivery Time Prediction")

a = int(input("Age of Delivery Partner: "))
b = float(input("Ratings of Previous Deliveries: "))
c = int(input("Total Distance: "))

# Convert to numpy array and reshape to (1, time_steps=1, features=3)
features = np.array([[a, b, c]]).reshape(1, 1, 3)

# Predict using the trained model
predicted_time = model.predict(features)

print("Predicted Delivery Time in Minutes =", predicted_time[0][0])













